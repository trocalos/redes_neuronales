import matplotlib.pyplot as plt

celsius= np.array([-40,-10,0,8,15,22,38],dtype=float)
fahrenheit=np.array([-40,14,32,46,59,72,100],dtype=float)

#capa=tf.keras.layers.Dense(units=1,input_shape=[1])
#modelo = tf.keras.Sequential([capa])

oculta1=tf.keras.layers.Dense(units=3,input_shape=[1])
oculta2=tf.keras.layers.Dense(units=3)
salida=tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1,oculta2,salida])


modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss="mean_squared_error"
)

print("Comenzando el entrenamiento ...")
historial= modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("Modelo entrenado")


plt.xlabel("# Ciclos")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])
plt.show()




#print("Hagamos una predicción")
#valor_a_calcular= float(input("Introduce el valor en Celsius a calcular en Fahrenheit "))
#resultado=modelo.predict([valor_a_calcular])
#print("El resultado es " + str(resultado) + " fahrenheit")


# Hacer una predicción con el modelo entrenado
print("Hagamos una predicción")
valor_a_calcular = float(input("Introduce el valor en Celsius a calcular en Fahrenheit: "))
resultado = modelo.predict([valor_a_calcular])
resultado_redondeado = int(round(resultado[0][0]))
print("**********  El resultado es " + str(resultado_redondeado) + " fahrenheit  ********")


print("Variables internas del modelo")
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())
