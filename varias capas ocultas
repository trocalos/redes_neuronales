import tensorflow as tf  # Importar TensorFlow
import numpy as np  # Importar NumPy
import matplotlib.pyplot as plt  # Importar Matplotlib

# Definir los valores de temperatura Celsius y Fahrenheit como arrays NumPy
celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

# Definir la arquitectura de la red neuronal
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])  # Capa oculta 1 con 3 unidades
oculta2 = tf.keras.layers.Dense(units=3)  # Capa oculta 2 con 3 unidades
salida = tf.keras.layers.Dense(units=1)  # Capa de salida con 1 unidad
modelo = tf.keras.Sequential([oculta1, oculta2, salida])  # Crear el modelo secuencial

# Compilar el modelo
modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),  # Usar el optimizador Adam con una tasa de aprendizaje de 0.1
    loss="mean_squared_error"  # Usar la función de pérdida de error cuadrático medio
)

# Entrenar el modelo
print("Comenzando el entrenamiento ...")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)  # Entrenar durante 1000 épocas
print("Modelo entrenado")

# Graficar el historial de pérdida
plt.xlabel("# Ciclos")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])
plt.show()

# Hacer una predicción con el modelo entrenado
print("Hagamos una predicción")
valor_a_calcular = float(input("Introduce el valor en Celsius a calcular en Fahrenheit: "))
resultado = modelo.predict([valor_a_calcular])
print("El resultado es " + str(resultado) + " fahrenheit")

# Imprimir las variables internas del modelo
print("Variables internas del modelo")
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())
